use dep::std;
use dep::std::collections::vec::Vec;
mod helpers;
use helpers::{combine, verify_signature};

fn main(
    leaf: [u8;32],
    path: [[u8;32];4],
    position: [u8;4],
    root: [u8;32],

    pub_x: [u8;32],
    pub_y: [u8;32],
    signature: [u8;64]
){
    let merkle = Merkle{
        leaf: leaf,
        path: path,
        position: position,
        root: root
    };
    merkle.prove();

    let sig = Signature{
        message: leaf,
        pub_x: pub_x,
        pub_y: pub_y,
        signature: signature
    };
    sig.verify();
}

// Struct to prove merkle paths
struct Merkle{
    leaf: [u8;32],
    path: [[u8;32];4],
    position: [u8;4],
    root: [u8;32]
}
impl Merkle{
    fn prove(self){
        let mut current_hash: [u8;32] = [0;32];
        if self.position[0] == 0{
            current_hash = std::hash::sha256(combine(self.leaf, self.path[0]));
        }
        else{
            current_hash = std::hash::sha256(combine(self.path[0], self.leaf));
        };
        for i in 1..self.path.len(){
            if self.position[i] == 0{
                current_hash = std::hash::sha256(combine(current_hash, self.path[i]));
            }
            else{
                current_hash = std::hash::sha256(combine(self.path[i], current_hash));
            }
        };
    
        assert(current_hash == self.root);
    }
}

struct Signature{
    message: [u8;32], 
    pub_x: [u8;32], 
    pub_y: [u8;32], 
    signature: [u8;64]
}

impl Signature{
    fn verify(self){
        assert(verify_signature(
            self.message,
            self.pub_x,
            self.pub_y,
            self.signature
        ));
    }
}

#[test]
fn test_main() {
    main(
        /*
            1. prove Merkle Path
        */
        // transaction hash
        [242, 69, 81, 38, 252, 95, 197, 129, 177, 105, 42, 137, 129, 73, 125, 148, 130, 204, 83, 82, 126, 104, 106, 71, 156, 96, 55, 233, 132, 103, 128, 11],
        // merkle proof
        [
            [102, 104, 122, 173, 248, 98, 189, 119, 108, 143, 193, 139, 142, 159, 142, 32, 8, 151, 20, 133, 110, 226, 51, 179, 144, 42, 89, 29, 13, 95, 41, 37],
            [46, 235, 116, 166, 23, 127, 88, 141, 128, 192, 199, 82, 185, 149, 86, 144, 45, 223, 150, 130, 208, 185, 6, 245, 170, 42, 219, 175, 132, 102, 164, 233],
            [18, 35, 52, 154, 64, 210, 238, 16, 189, 27, 235, 181, 136, 158, 248, 1, 140, 139, 193, 51, 89, 237, 148, 179, 135, 129, 10, 249, 108, 110, 66, 104],
            [91, 130, 182, 149, 167, 172, 38, 104, 225, 136, 183, 95, 125, 79, 167, 159, 170, 80, 65, 23, 209, 253, 252, 190, 138, 70, 145, 92, 26, 138, 81, 145],
            //[12, 33, 31, 155, 83, 132, 198, 136, 72, 162, 9, 172, 31, 147, 144, 83, 48, 18, 140, 183, 16, 174, 88, 55, 121, 192, 113, 39, 239, 136, 255, 92],
        ],
        // positions
        [
            0,
            0,
            0,
            0,
            //0
        ],
        // current merkle root
        [39, 181, 138, 254, 163, 194, 199, 127, 5, 162, 227, 167, 27, 32, 243, 187, 240, 250, 241, 138, 176, 209, 217, 2, 55, 233, 70, 246, 100, 170, 163, 188],
        
        /*
            2. prove the signature
        
        */
        // pub_x
        [76, 195, 113, 207, 31, 191, 143, 106, 36, 227, 255, 61, 28, 142, 167, 76, 31, 82, 16, 250, 167, 114, 101, 243, 133, 87, 115, 12, 12, 19, 26, 177],
        /// pub_y
        [100, 235, 51, 68, 137, 178, 110, 103, 129, 0, 95, 88, 149, 40, 157, 116, 102, 11, 63, 87, 202, 234, 39, 133, 127, 99, 197, 208, 167, 89, 29, 199],
        // signature
        [36, 242, 254, 140, 255, 254, 247, 61, 0, 116, 57, 148, 101, 115, 255, 56, 4, 30, 31, 139, 33, 45, 127, 73, 244, 136, 245, 205, 152, 214, 141, 20, 58, 40, 206, 47, 15, 120, 43, 70, 209, 148, 98, 207, 145, 15, 2, 175, 218, 253, 169, 230, 96, 91, 187, 191, 202, 63, 10, 144, 189, 85, 109, 169],
    );
}



/* depth: 5

    pos:

* inverted for tornado tree
    * true => 0
    * true => 0
    * true => 0
    * true => 0
    * true => 0

[([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], false), 
([102, 104, 122, 173, 248, 98, 189, 119, 108, 143, 193, 139, 142, 159, 142, 32, 8, 151, 20, 133, 110, 226, 51, 179, 144, 42, 89, 29, 13, 95, 41, 37], true), 
([46, 235, 116, 166, 23, 127, 88, 141, 128, 192, 199, 82, 185, 149, 86, 144, 45, 223, 150, 130, 208, 185, 6, 245, 170, 42, 219, 175, 132, 102, 164, 233], true), 
([18, 35, 52, 154, 64, 210, 238, 16, 189, 27, 235, 181, 136, 158, 248, 1, 140, 139, 193, 51, 89, 237, 148, 179, 135, 129, 10, 249, 108, 110, 66, 104], true), 
([91, 130, 182, 149, 167, 172, 38, 104, 225, 136, 183, 95, 125, 79, 167, 159, 170, 80, 65, 23, 209, 253, 252, 190, 138, 70, 145, 92, 26, 138, 81, 145], true),

([12, 33, 31, 155, 83, 132, 198, 136, 72, 162, 9, 172, 31, 147, 144, 83, 48, 18, 140, 183, 16, 174, 88, 55, 121, 192, 113, 39, 239, 136, 255, 92], true)]
Root history: 
[[118, 165, 49, 223, 114, 192, 86, 211, 49, 174, 70, 160, 76, 59, 182, 249, 200, 121, 83, 175, 48, 34, 169, 46, 198, 203, 74, 186, 101, 91, 225, 148]]

*/


